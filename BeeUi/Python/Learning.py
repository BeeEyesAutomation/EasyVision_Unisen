import torch
import torchvision
import torchvision.transforms as T
import cv2
from ultralytics import YOLO
import time
import os
import numpy as np
#from MatCV import process_image  # Gi·∫£ s·ª≠ b·∫°n ƒë√£ t·∫°o module n√†y
# ƒê∆∞·ªùng d·∫´n ƒë·∫øn m√¥ h√¨nh YOLOv8 (.pt) v√† ·∫£nh b·∫°n mu·ªën ki·ªÉm tra
model_path='NIDEC_5_5S.pt'
image_path='kd5.png'
models= {}
TypeModel=2
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
class ObjectDetector:
        def __init__(self):
                self.models = {}
        @staticmethod
        def close():
                exit()
        @staticmethod
        def load_model(nameTool,model_path,Type):
                global models ,TypeModel
                TypeModel=Type
                    # T·∫£i m√¥ h√¨nh YOLOv8 t·ª´ t·ªáp .pt
                if Type==1:
                        models[nameTool] = YOLO(model_path)
                elif Type==2:
                        # üè∑Ô∏è ƒê·ªãnh nghƒ©a m√¥ h√¨nh Faster R-CNN
                        models[nameTool] = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=False)
                        num_classes = 6  # S·ªë l·ªõp (5 l·ªõp + 1 l·ªõp n·ªÅn)
                        # üè∑Ô∏è T·∫°o ƒë·∫ßu ra ph√π h·ª£p s·ªë l·ªõp
                        in_features = model.roi_heads.box_predictor.cls_score.in_features
                        models[nameTool].roi_heads.box_predictor = torchvision.models.detection.faster_rcnn.FastRCNNPredictor(in_features, num_classes)
                        # üè∑Ô∏è T·∫£i tr·ªçng s·ªë t·ª´ t·ªáp
                        
                        
                        if not os.path.exists(model_path):
                            print(f"‚ùå Kh√¥ng t√¨m th·∫•y m√¥ h√¨nh: {model_path}")
                            exit()
                        # üî• T·∫£i tr·ªçng s·ªë v√†o m√¥ h√¨nh
                        models[nameTool].load_state_dict(torch.load(model_path, map_location=device))
                        models[nameTool].to(device)
                        models[nameTool].eval() 
                return models
        @staticmethod
        def predict(image_array, confidence_threshold,nameTool):
                #image_array = cv2.imread(image_path)
                if isinstance(image_array, np.ndarray):
                    #cv2.imwrite("raw.png",image_array)
                    #input_tensor = torch.from_numpy(raw).permute(2, 0, 1).float() / 255.0
                        # Th√™m m·ªôt chi·ªÅu batch
                    #input_tensor = input_tensor.unsqueeze(0)
                    global models,TypeModel,device  # Khai b√°o r·∫±ng ch√∫ng ta ƒëang s·ª≠ d·ª•ng bi·∫øn to√†n c·ª•c
                    model=models.get(nameTool)
                    if model is None:
                        raise ValueError("M√¥ h√¨nh ch∆∞a ƒë∆∞·ª£c t·∫£i. Vui l√≤ng t·∫£i m√¥ h√¨nh tr∆∞·ªõc khi d·ª± ƒëo√°n.")
                    if TypeModel ==1:
                            results = model.predict(image_array, save=False, show=False, conf=confidence_threshold)
                            if isinstance(results, list) and len(results) > 0:
                                for result in results:
                                    #print(result)
                                    #print(results[0].boxes)
                                    
                                    if hasattr(result, 'boxes'):  # Ki·ªÉm tra xem ƒë·ªëi t∆∞·ª£ng c√≥ thu·ªôc t√≠nh 'boxes' kh√¥ng
                                        boxes = result.boxes  # L·∫•y c√°c bounding boxes
                                        valid_boxes = []
                                        scores = []
                                        labels=[]
                                        # N·∫øu boxes l√† tensor
                                        for box in boxes.data:
                                            x1, y1, x2, y2, conf, cls = box.tolist()  # Chuy·ªÉn ƒë·ªïi tensor th√†nh danh s√°ch
                                            class_id = int(cls)  # ƒê·∫£m b·∫£o ID l·ªõp l√† s·ªë nguy√™n
                                            #if(model.names[class_id]!="dauloc"):
                                             #      continue
                                            valid_boxes.append((int(x1), int(y1), int(x2), int(y2)))
                                            scores.append(conf)
                                            labels.append(model.names[class_id])
                                        print("Bounding Boxes:", valid_boxes)
                                        print("Scores:", scores)
                                        return valid_boxes, scores,labels
                                    else:
                                        print("ƒê·ªëi t∆∞·ª£ng kh√¥ng c√≥ thu·ªôc t√≠nh 'boxes'") 
                            else:
                                print("Kh√¥ng c√≥ bounding boxes ƒë∆∞·ª£c ph√°t hi·ªán.")
                                raise ValueError("Input must be a numpy array")
                    elif TypeModel ==2:
                            # üîÑ Chuy·ªÉn ·∫£nh v·ªÅ tensor cho m√¥ h√¨nh
                            transform = T.Compose([T.ToTensor()])
                            image_tensor = transform(image_array).unsqueeze(0).to(device)
                            # üïí ƒêo th·ªùi gian b·∫Øt ƒë·∫ßu
                            start_time = time.time()
                            # üîç D·ª± ƒëo√°n bounding boxes
                            with torch.no_grad():
                                predictions = model(image_tensor)[0]
                            valid_boxes = []
                            scores = []
                            labels=[]
                            # üéØ L·∫•y bounding boxes, labels v√† scores
                            valid_boxes = predictions["boxes"].cpu().numpy()
                            labels = predictions["labels"].cpu().numpy()
                            scores = predictions["scores"].cpu().numpy()
                            end_time = time.time()
                            cycle_time = end_time - start_time
                            print("Bounding Boxes:", valid_boxes)
                            print("Scores:", scores)
                            print("Label:", labels)
                            print(f"‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω cho ·∫£nh : {cycle_time:.4f} gi√¢y")
                            return valid_boxes,scores,labels
                else:
                    raise ValueError("Input must be a numpy array")
#ObjectDetector.load_model("HC",model_path,1)
#ObjectDetector.predict(0.5,"HC")
